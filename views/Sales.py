import streamlit as st
import gspread
import pandas as pd
from utils.google_sheet import connect_to_sheet
import datetime
from utils.functions import format_number


from forms.fitness import fitness_form
from forms.product import product_form

def load_data():
    sheet = connect_to_sheet()
    records = sheet.get_all_records()
    df = pd.DataFrame(records)

    # –û–≥–Ω–æ–æ–≥ –∑”©–≤—Ö”©–Ω date –±–æ–ª–≥–æ—Ö
    df['–û–≥–Ω–æ–æ'] = pd.to_datetime(df['–û–≥–Ω–æ–æ'], errors='coerce').dt.date
    df = df[df['–û–≥–Ω–æ–æ'].notna()]  # NaT –º”©—Ä“Ø“Ø–¥–∏–π–≥ —Ö–∞—Å–∞—Ö

    return df


st.markdown("""
    <style>
    .dataframe tbody tr th {
        font-size: 12px !important;
    }
    .dataframe tbody tr td {
        font-size: 12px !important;
    }
    </style>
    """, unsafe_allow_html=True)

col1, col2 = st.columns(2, gap="small", vertical_alignment="center")

@st.dialog("–§–∏—Ç–Ω–µ—Å—Å –∞–Ω–≥–∏")
def fitness_sales():
    fitness_form()

@st.dialog("–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω")
def product_sales():
    product_form()


with col1:
    if st.button("üí™ –§–∏—Ç–Ω–µ—Å—Å –∞–Ω–≥–∏"):
        fitness_sales()

with col2:       
    if st.button("üç≠ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω"):
        product_sales()
    

df = load_data()

today = datetime.date.today()

# –û–≥–Ω–æ–æ–Ω—ã —à“Ø“Ø–ª—Ç UI
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("–≠—Ö–ª—ç—Ö –æ–≥–Ω–æ–æ", df['–û–≥–Ω–æ–æ'].min())
with col2:
    end_date = st.date_input("–¢”©–≥—Å–≥”©–ª –æ–≥–Ω–æ–æ", df['–û–≥–Ω–æ–æ'].max())

filtered_df = df[(df['–û–≥–Ω–æ–æ'] >= start_date) & (df['–û–≥–Ω–æ–æ'] <= end_date)]



# –û–≥–Ω–æ–æ–≥–æ–æ—Ä —Ñ–∏–ª—å—Ç—Ä —Ö–∏–π—Ö
#"filtered_df = df[(df['–û–≥–Ω–æ–æ'] >= pd.to_datetime(start_date)) & (df['–û–≥–Ω–æ–æ'] <= pd.to_datetime(end_date))]"

Status_list = ['–¢”©–ª—Å”©–Ω', '–¢”©–ª”©”©–≥“Ø–π']
selected_status = st.selectbox("–¢”©–ª–±”©—Ä —Ç”©–ª—Å”©–Ω —ç—Å—ç—Ö —à“Ø“Ø—Ö", options=['–ë“Ø–≥–¥'] + Status_list)

Active_list = ['Fitness', 'Product']
selected_active = st.selectbox('–¢”©—Ä”©–ª”©”© —Å–æ–Ω–≥–æ–Ω–æ —É—É', options=['–ë“Ø–≥–¥'] + Active_list)

# –®“Ø“Ø–ª—Ç —Ö–∏–π—Ö
if selected_status != '–ë“Ø–≥–¥':
    filtered_df = filtered_df[filtered_df['–¢”©–ª—Å”©–Ω —ç—Å—ç—Ö'] == selected_status]

if selected_active != '–ë“Ø–≥–¥':
    filtered_df = filtered_df[filtered_df['Type'] == selected_active]

# Streamlit –¥—ç—ç—Ä —Ö–∞—Ä—É—É–ª–∞—Ö

columns_to_show = ['Month', 'Day', '“Æ–π–ª—á–ª“Ø“Ø–ª—ç–≥—á', '–ê–Ω–≥–∏', '–®–∏—Ä—Ö—ç–≥', '–î“Ø–Ω', '–¢”©–ª—Å”©–Ω —ç—Å—ç—Ö', '–ë“Ø—Ä—Ç–≥—ç—Å—ç–Ω']

columns_to_show_details = ['–û–≥–Ω–æ–æ', '“Æ–π–ª—á–ª“Ø“Ø–ª—ç–≥—á', '–ê–Ω–≥–∏', 'Type', '–¢”©–ª–±”©—Ä', '–•—è–º–¥—Ä–∞–ª', '–®–∏—Ä—Ö—ç–≥', '–î“Ø–Ω', '–¢”©–ª—Å”©–Ω —ç—Å—ç—Ö', 'Method', '–¢—ç–º–¥—ç–≥–ª—ç–ª', '–ë“Ø—Ä—Ç–≥—ç—Å—ç–Ω']
show_detials = st.checkbox('–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö–∞—Ä–∞—Ö', value=False)

if show_detials:
    st.dataframe(filtered_df[columns_to_show_details], use_container_width=True)
else:
    st.dataframe(filtered_df[columns_to_show], use_container_width=True)


# 6. ”®–Ω”©”©–¥—Ä–∏–π–Ω –æ—Ä–ª–æ–≥–æ
today_income = df[(df['–û–≥–Ω–æ–æ'] == today) & (df['–¢”©–ª—Å”©–Ω —ç—Å—ç—Ö'] == '–¢”©–ª—Å”©–Ω')]
today_income_nopay = df[(df['–û–≥–Ω–æ–æ'] == today) & (df['–¢”©–ª—Å”©–Ω —ç—Å—ç—Ö'] == '–¢”©–ª”©”©–≥“Ø–π')]['–î“Ø–Ω'].sum()


col1, col2 = st.columns(2)
with col1:
    today_income_payed = today_income['–î“Ø–Ω'].sum()
    st.metric("üü¢ ”®–Ω”©”©–¥—Ä–∏–π–Ω —Ç”©–ª”©–≥–¥—Å”©–Ω –æ—Ä–ª–æ–≥–æ", f"{today_income_payed:,.0f} ‚ÇÆ")
    method_summary = today_income.groupby('Method')['–î“Ø–Ω'].sum().reset_index()
    for i, row in method_summary.iterrows():
        st.markdown(f"**{row['Method']} –æ—Ä–ª–æ–≥–æ:** {format_number(row['–î“Ø–Ω'])}", unsafe_allow_html=True)
with col2:
    st.metric("üî¥ ”®–Ω”©”©–¥—Ä–∏–π–Ω —Ç”©–ª”©”©–≥“Ø–π –æ—Ä–ª–æ–≥–æ", f"{today_income_nopay:,.0f} ‚ÇÆ")












